using Microsoft.SemanticKernel;
using System.ComponentModel;
using AICodeReviewer.Services.Interfaces;

namespace AICodeReviewer.Plugins;

/// <summary>
/// Semantic Kernel plugin for Jira operations
/// </summary>
public class JiraPlugin
{
    private readonly IJiraService _jiraService;

    public JiraPlugin(IJiraService jiraService)
    {
        _jiraService = jiraService ?? throw new ArgumentNullException(nameof(jiraService));
    }

    [KernelFunction]
    [Description("Creates a Jira ticket for code review issues")]
    public async Task<string> CreateTicket(
        [Description("Jira project key")] string project,
        [Description("Issue type")] string issueType,
        [Description("Issue summary")] string summary,
        [Description("Issue description")] string description,
        [Description("Priority level")] string priority = "Medium",
        [Description("Assignee username")] string assignee = "")
    {
        try
        {
            Console.WriteLine($"üé´ Creating REAL Jira ticket in project {project}...");

            var ticketKey = await _jiraService.CreateIssueAsync(project, issueType, summary, description, priority, assignee);

            return $"Successfully created Jira ticket {ticketKey}";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error creating Jira ticket: {ex.Message}");
            return $"Error creating Jira ticket: {ex.Message}";
        }
    }

    [KernelFunction]
    [Description("Updates an existing Jira ticket")]
    public async Task<string> UpdateTicket(
        [Description("Jira ticket ID")] string ticketId,
        [Description("Update description")] string update,
        [Description("New status")] string status = "")
    {
        try
        {
            Console.WriteLine($"üîÑ Updating JIRA Ticket: {ticketId}");

            // Actually call the JIRA service to update the ticket
            var ticketKeys = new List<string> { ticketId };
            var reviewedFiles = new List<string> { "Multiple files reviewed" };
            var topIssues = new List<string> { update };

            // Use the real JIRA service to update the ticket
            await _jiraService.UpdateTicketsWithReviewResultsAsync(
                ticketKeys: ticketKeys,
                prNumber: "N/A", // Will be extracted from update description if needed
                author: "AI Code Reviewer",
                issueCount: 1, // Indicates issues were found
                reviewedFiles: reviewedFiles,
                topIssues: topIssues,
                detailedIssues: null
            );

            Console.WriteLine($"‚úÖ Successfully updated JIRA ticket {ticketId} via API");
            return $"Successfully updated Jira ticket {ticketId}";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error updating JIRA ticket {ticketId}: {ex.Message}");
            return $"Error updating Jira ticket: {ex.Message}";
        }
    }

    [KernelFunction]
    [Description("Handles JIRA tickets for code reviews - updates existing tickets from PR title or creates new ones")]
    public async Task<string> HandleCodeReviewTicket(
        [Description("Pull request title to extract existing ticket IDs from")] string prTitle,
        [Description("Pull request number")] string prNumber,
        [Description("Code review summary")] string reviewSummary,
        [Description("Number of issues found")] string issueCount,
        [Description("Project key for new tickets")] string project = "OPS",
        [Description("Issue type for new tickets")] string issueType = "Task",
        [Description("Priority for new tickets")] string priority = "Medium")
    {
        try
        {
            Console.WriteLine($"üé´ Processing JIRA tickets for PR #{prNumber}...");
            Console.WriteLine($"   PR Title: {prTitle}");

            // Extract existing ticket keys from PR title
            var ticketKeys = _jiraService.ExtractTicketKeysFromTitle(prTitle);

            if (ticketKeys.Any())
            {
                Console.WriteLine($"   ‚úÖ Found existing ticket(s): {string.Join(", ", ticketKeys)}");

                // Update existing tickets
                var results = new List<string>();
                foreach (var ticketKey in ticketKeys)
                {
                    Console.WriteLine($"   üîÑ Updating existing ticket: {ticketKey}");

                    var updateDescription = $"Code Review Results for PR #{prNumber}:\n\n{reviewSummary}\n\nIssues Found: {issueCount}\n\nThis update was automatically generated by the AI Code Reviewer.";

                    var updateResult = await UpdateTicket(ticketKey, updateDescription, "In Progress");
                    results.Add(updateResult);
                }

                return $"Updated {ticketKeys.Count} existing JIRA ticket(s): {string.Join(", ", ticketKeys)}";
            }
            else
            {
                Console.WriteLine($"   ‚ÑπÔ∏è No existing tickets found in PR title, creating new ticket...");

                // Create new ticket
                var summary = $"Code Review Issues - PR #{prNumber}";
                var description = $"Automated code review found issues in PR #{prNumber}.\n\n{reviewSummary}\n\nIssues Found: {issueCount}\n\nPlease review the findings and address any critical issues.";

                var newTicketResult = await CreateTicket(project, issueType, summary, description, priority, "");

                return $"Created new JIRA ticket: {newTicketResult}";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error handling JIRA ticket: {ex.Message}");
            return $"Error handling JIRA ticket: {ex.Message}";
        }
    }
}
